{"version":3,"sources":["Pages/Loader/Loader.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppIcon","width","height","viewBox","fill","xmlns","cx","cy","r","clip-path","d","id","transform","Loading","className","Body","React","lazy","console","disableYellowBox","App","useState","isLoading","setLoading","appendScript","scriptToAppend","script","document","createElement","src","async","body","appendChild","appendLinks","linkToAppend","link","rel","href","loadScripts","a","init","useEffect","fallback","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sGAAA,oBAGMA,GAHN,MAGgB,kBACZ,yBAAMC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BAC/D,4BAAQC,GAAG,OAAOC,GAAG,OAAOC,EAAE,OAAOJ,KAAK,YAC1C,uBAAGK,YAAU,eACT,0BAAMC,EAAE,k7CAAk7CN,KAAK,aAEn8C,8BACI,8BAAUO,GAAG,SACT,0BAAMV,MAAM,KAAKC,OAAO,KAAKE,KAAK,QAAQQ,UAAU,0BAsBrDC,IAfC,WAKZ,OACI,yBAAKC,UAAU,WACX,kBAACd,EAAD,S,0JCpBNe,G,MAAOC,IAAMC,MAAK,kBAAM,wDAE9BC,QAAQC,kBAAmB,EAgDZC,MA9Cf,WAAgB,IAAD,EACmBC,oBAAS,GAD5B,mBACNC,EADM,KACKC,EADL,KAGPC,EAAe,SAACC,GACpB,IAAMC,EAASC,SAASC,cAAc,UACtCF,EAAOG,IAAMJ,EACbC,EAAOI,OAAQ,EACfH,SAASI,KAAKC,YAAYN,IAGtBO,EAAc,SAACC,GACnB,IAAMC,EAAOR,SAASC,cAAc,QACpCO,EAAKC,IAAM,aACXD,EAAKE,KAAOH,EACZP,SAASI,KAAKC,YAAYG,IAGtBG,EAAW,uCAAG,sBAAAC,EAAA,6DAClBf,EACE,oEAEFA,EACE,6EAEFA,EACE,uEAEFS,EACE,4EAXgB,SAaF,mCAbE,cAcdO,OACJjB,GAAW,GAfO,2CAAH,qDAsBjB,OAJAkB,qBAAU,WACRH,MACC,IAGD,kBAAC,WAAD,CAAUI,SAAU,kBAAC,IAAD,OACjBpB,EAAY,kBAAC,IAAD,MAAc,kBAACP,EAAD,QCtC3B4B,G,YAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1B5C,QAAQ6C,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBtC,QAAQ6C,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLjD,QAAQiD,MAAM,4CAA6CA,MCjGjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3C,SAAS4C,eAAe,SDgBnB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIoB,IACpBC,GACA5B,OAAOC,SAAST,MAEJqC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMuB,GAAN,sBAEP9B,IAgEV,SAAiCO,EAAeC,GAE9CyB,MAAM1B,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5BtB,MAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAM5B,MAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,MAAK,WAC7BV,OAAOC,SAASuC,eAKpBpC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLhD,QAAQ6C,IACN,oEAvFAuB,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM5B,MAAK,WACjCrC,QAAQ6C,IACN,iHAMJd,EAAgBC,EAAOC,OCzC/BE,I","file":"static/js/main.3c1c975f.chunk.js","sourcesContent":["import React from 'react'\nimport \"./Loader-style.scss\"\n\nconst AppIcon = () => (\n    <svg  width=\"60\" height=\"60\" viewBox=\"0 0 45 45\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"22.5\" cy=\"22.5\" r=\"22.5\" fill=\"#FEC576\" />\n        <g clip-path=\"url(#clip0)\">\n            <path d=\"M22.0723 21.8125V21.7656L20.3123 18.6813C20.3123 18.6813 19.8998 18.7563 19.4529 19.3891C19.1435 19.825 11.1307 30.5969 11.086 30.6813C10.8454 31.15 11.141 31 11.6257 30.7609C11.6532 30.7609 15.5616 29.0453 15.5616 29.0453C15.5788 29.0172 15.5582 29.0406 15.5823 29.0172C15.5685 28.7781 15.5548 27.7891 15.5479 27.7188C15.5273 27.475 15.6235 27.3953 15.7885 27.3016L18.9716 25.7172C18.9923 25.6797 22.0138 21.8875 22.0723 21.8125V21.8125ZM27.5757 27.4422C28.0329 28.1969 28.2873 28.0656 28.6344 27.8781C28.7444 27.8219 32.6013 25.6469 32.6838 25.5859C32.9588 25.3844 32.6254 24.8031 32.4363 24.4891C32.3641 24.3719 25.386 12.9766 25.3138 12.85C24.9804 12.2781 24.8223 12.2453 23.9938 12.25C23.6432 12.25 20.3226 12.2734 19.9891 12.2781C19.3291 12.2828 18.8582 12.2641 19.3291 13.0703C19.5938 13.5156 27.3798 27.1188 27.5757 27.4422V27.4422ZM32.8248 27.5172C32.7457 27.5031 31.9791 27.2969 31.5185 27.1797C31.5185 27.1797 27.5654 29.5422 27.4794 29.5984C26.9294 29.9406 26.5548 29.4484 26.2179 28.9141L24.2551 25.4453C24.0694 25.4031 22.1788 24.9953 22.0104 25.0094C21.9038 25.0188 21.6804 25.0469 21.5154 25.1453C21.3469 25.2438 16.5241 27.6203 16.3523 27.7094C16.1769 27.8031 15.9604 27.8781 15.9707 28.0656C15.9776 28.1828 16.0394 28.1875 16.1288 28.2297C16.2216 28.2672 26.4723 31.3984 26.7163 31.4688C27.2526 31.6234 28.0398 31.9609 28.5588 31.5484C28.631 31.4922 32.8144 27.9672 32.8832 27.9016C33.0688 27.7141 33.031 27.5828 32.8248 27.5172V27.5172Z\" fill=\"#1F2235\" />\n        </g>\n        <defs>\n            <clipPath id=\"clip0\">\n                <rect width=\"22\" height=\"24\" fill=\"white\" transform=\"translate(11 10)\" />\n            </clipPath>\n        </defs>\n    </svg>\n\n)\n\nconst Loading = () => {\n    // $(window).on(\"load\", () => {\n    //     $(\".Loading\").fadeOut(\"slow\")\n    // })\n\n    return (\n        <div className=\"Loading\">\n            <AppIcon />\n            {/* <span className=\"loader\">\n                <span className=\"loader-inner\" />\n            </span> */}\n        </div>\n    )\n}\n\nexport default Loading","import React, { useState, useEffect, Suspense } from \"react\";\nimport Loading from \"./Pages/Loader/Loader\";\n//@ts-ignore\nimport \"aos/dist/aos.css\";\n\nconst Body = React.lazy(() => import(\"./Pages/Body/Body\"));\n\nconsole.disableYellowBox = true;\n\nfunction App() {\n  const [isLoading, setLoading] = useState(true);\n\n  const appendScript = (scriptToAppend: string) => {\n    const script = document.createElement(\"script\");\n    script.src = scriptToAppend;\n    script.async = true;\n    document.body.appendChild(script);\n  };\n\n  const appendLinks = (linkToAppend: string) => {\n    const link = document.createElement(\"link\");\n    link.rel = \"stylesheet\";\n    link.href = linkToAppend;\n    document.body.appendChild(link);\n  };\n\n  const loadScripts = async () => {\n    appendScript(\n      \"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"\n    );\n    appendScript(\n      \"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js\"\n    );\n    appendScript(\n      \"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js\"\n    );\n    appendLinks(\n      \"https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.0.0/animate.min.css\"\n    );\n    let val = await import(\"aos\");\n    val.init();\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    loadScripts();\n  }, []);\n\n  return (\n    <Suspense fallback={<Loading />}>\n      {isLoading ? <Loading /> : <Body />}\n    </Suspense>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}